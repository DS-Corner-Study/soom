# 11주차 스터디

# 7장 useReducer와 상태 관리

## useReducer 이해하기

리액트 훅 useReducer를 이용하면 컴포넌트에서 상태 변화 코드를 쉽게 분리할 수 있다.

```jsx
import { useState } from "react";

function TestComp() {
  const [count, setCount] = useState(0);
  const onIncrease = () => {
    setCount(count + 1);
  };
  const onDecrease = () => {
    setCount(count - 1);
  };
  return (
    <div>
      <h4>테스트 컴포넌트</h4>
      <div>
        <bold>{count}</bold>
      </div>
      <div>
        <button onClick={onIncrease}>+</button>
        <button onClick={onDecrease}>-</button>
      </div>
    </div>
  );
}
export default TestComp;
```

### 상태 변화 코드란?

State 값을 변경하는 코드

상태 변화 코드를 컴포넌트에서 분리한다

⇒ 컴포넌트 내부에 작성했던 상태 변화 코드를 외부에 작성한다.

이유? 하나의 컴포넌트 안에 많은 상태 변화 코드가 있다면 가독성 Bad

### useReducer의 기본 사용법

```jsx
import { useState } from "react"; 
/* useReducer를 사용하기 위해 react 라이브러리를 불러온다 */

function reducer(state, action) {
  switch (action.type) {
    case "INCREASE":
      return state + action.data;
    case "DECREASE":
      return state - action.data;
    case "INIT":
      return 0;
    default:
      return state;
  }
} /* 컴포넌트 밖에 생성 하기*/

function TestComp() {
  const [count, dispatch] = useReducer(reduer, 0);

<button onClick={() => dispatch({ type: "INCREASE", data: 1 })}>
+
</button>
<button onClick={() => dispatch({ type: "DECREASE", data: 1 })}>
-
</button>
<button onClick={() => dispatch({ type: "INIT" })}>0으로 초기화</button>
```

const [ state 변수, 상태 변화 촉발 함수 ] = 생성자 함수 ( 상태 변화 함수, 초기값);

action 객체? State의 변경 정보를 담고 있는 객체

## [할 일 관리] 앱 업그레이드

### useState를 useReducer로 바꾸기

```jsx
import { useReducer, useRef } from "react";

function reducer(State, action) {
  return State;
}

function App() {
  const [todo, dispatch] = useReducer(reducer, mockTodo);
  const idRef = useRef(3);

  const onCreate = (content) => {
    idRef.current += 1;
  };
  const onUpdate = (targetId) => {};
  const onDelete = (targetId) => {};
```

### Create: 할 일 아이템 추가하기

```jsx
function reducer(State, action) {
  switch (action.type) {
    case "CREATE": {
      return [action.newItem, ...state];
    }
    default:
      return state;
  }
}

const onCreate = (content) => {
    dispatch({
      type: "CREATE",
      newItem: {
        id: id.Ref.current,
        content,
        isDone: false,
        createDate: new Date().getTime(),
      },
    });
    idRef.current += 1;
  };
```

### Update: 할 일 아이템 수정하기

```jsx
function reducer(State, action) {
  switch (action.type) {
    case "CREATE": {
      return [action.newItem, ...state];
    }
    case "UPDATE": {
      return state.map((it) =>
        it.id === action.targetId
          ? {
              ...it,
              isDine: !it.isDone,
            }
          : it
      );
    }
    default:
      return state;
  }
}

const onUpdate = (targetId) => {
    dispatch({
      type: "UPDATE",
      targetId,
    });
  };
```

### Delete: 할 일 삭제 구현하기

```jsx
function reducer(State, action) {
  switch (action.type) {
    case "CREATE": {
      return [action.newItem, ...state];
    }
    case "UPDATE": {
      return state.map((it) =>
        it.id === action.targetId
          ? {
              ...it,
              isDine: !it.isDone,
            }
          : it
      );
    }
    case "DELETE": {
      return state.filter((it) => it.id !== action.targetId);
    }
    default:
      return state;
  }
}

const onDelete = (targetId) => {
    dispatch({
      type: "DELETE",
      targetId,
    });
  };
```

# 8장 최적화

## 최적화와 메모이제이션

최적화란?

- 웹 서비스의 성능을 개선하는 기술
- 프로그래밍에서 불필요하게 낭비되는 연산을 줄여 렌더링의 성능을 높이는 방법

메모이제이션이란 (Memoization)?

- 메모하는 방법
- 동적 계획법 (Dynamic Programming, DP)
- 특정 입력에 대한 결과를 계산해 메모리 어딘가에 저장했다가, 동일한 요청이 들어오면 저장한 결과값을 제공하여 빠르게 응답하는 기술

## 함수의 불필요한 재호출 방지하기

useMemo란? 메모이제이션 기법을 이용해 연산의 결과값을 기억했다가 필요할 때 사용함으로써 불필요한 함수 호출을 막아 주는 리액트 훅

### 할 일 분석 기능 추가하기

```jsx
const analyzeTodo = () => {
    const totalCount = todo.length;
    const doneCount = todo.filter((it) => it.isDone).length;
    const notDoneCount = totalCount - doneCount;
    return {
      totalCount,
      doneCount,
      notDoneCount,
    };
  };
  const { totalCount, doneCount, notDoneCount } = analyzeTodo();

<div>
  <div>퐁 개수: {totalCount}</div>
  <div>완료된 할 일: {doneCount}</div>
	<div>아직 완료하지 못 한 할 일: {notDoneCount}</div>
</div>
```

### 문제점 파악하기

컴포넌트 내부에서 선언한 함수는 렌더링할 때마다 실행된다.

### useMemo를 이용해 [할 일 관리] 앱 최적화하기

[useMemo의 용법]

const value = useMemo( 콜백 함수, 의존성 배열 );

```jsx
import { useStat, useMemo } from "react";
const analyzeTodo = useMemo(() => {
    console.log("analyzeTodo 함수 호출");
    const totalCount = todo.length;
    const doneCount = todo.filter((it) => it.isDone).length;
    const notDoneCount = totalCount - doneCount;
    return {
      totalCount,
      doneCount,
      notDoneCount,
    };
  }, [todo]);
  const { totalCount, doneCount, notDoneCount } = analyzeTodo;
```

## 불필요한 컴포넌트 리렌더 방지하기

### 고차 컴포넌트와 횡단 관심사

고차 컴포넌트란? (HOC, Higher Order Component)

- 컴포넌트의 기능을 다시 사용하기 위한 리액트의 고급기술
- 인수로 전돨된 컴포넌트를 새로운 컴포넌트로 반환하는 함수

ex) const EnhancedComp = withFunc(Comp);

래핑된 컴포넌트: 고차 컴포넌트에 인수로 전달된 컴포넌트

강화된 컴포넌트: 고차 컴포넌트가 반환하는 컴포넌트

횡단 관심사란? (Cross-Cutting Concerns)

- 비즈니스 로직과 구분되는 공통 기능
- 로깅, 데이터베이스 접속, 인가 등 여러 곳에서 호출해 사용하는 코드

### React.memo를 이용해 [할 일 관리] 앱 최적화하기

React.memo란? 컴포넌트가 모든 상황에서 리렌더되지 않도록 강화함으로써 서비스를 최적화하는 도구

사용법? 강화하고 싶은, 즉 메모이제이션을 적용하고 싶은 컴포넌트를 React.memo로 감싸면 된다.

[React.memo의 용법]

const memoizedComp = React.memo( 메모이제이션하려는 컴포넌트 );

```jsx
import React from "react";
const Header = () => {
  console.log("Header 업데이트");
  return (
    <div className="Header">
      <h3>오늘은 📅</h3>
      <h1>{new Date().toDateString()}</h1>
    </div>
  );
};
export default React.memo(Header);
/* Header.js에서 Header 컴포넌트에 메모이제이션을 적용해 내보낸다 */
```

```jsx
import React from "react";

const TodoItem = ({ id, content, isDone, createdDate, onUpdate, onDelete }) => {
  console.log(`${id} TodoItem 업데이트`);

export default React.memo(TodoItem);
```

## 불필요한 함수 재생성 방지하기

useCallback이란? 컴포넌트가 리렌더될 때 내부에 작성된 함수를 다시 생성하지 않도록 메모이제이션하는 리액트 훅

### useCallback을 이용해 [할 일 관리] 앱 최적화하기

[useCallback의 용법]

const memoizedFunc = useCallback( 콜백 함수, 의존성 배열 )

첫 번째 인수로 전달한 콜백 함수를 어떤 경우에도 다시 생성되지 않게 하려면?

consto memoizedFunc = useCallback( func, [] )

```jsx
import { useReducer, useRef, useCallback } from "react";

const onUpdate = useCallback((targetId) => {
    dispatch({
      type: "UPDATE",
      targetId,
    });
  }, []);
  const onDelete = useCallback((targetId) => {
    dispatch({
      type: "DELETE",
      targetId,
    });
  }, []);
```

### 최적화할 때 유의할 점

1. 최적화는 항상 마지막에 하기! 프로젝트 개발이 끝나고 마지막에 진행하세요
2. 모든 것을 최적화할 필요는 없다! 부하가 많다고 예상되는 것, 복잡한 연산 수행, 반복적으로 컴포넌트가 나타다는 것 등을 대상으로 진행된다
3. 컴포넌트 구조를 잘 설계했는지 검토하기! 기능 or 역할 단위로 잘 분리했는지 확인 후 최적화하기
4. 최적화는 여기서 끝이 아닙니다 뿅!