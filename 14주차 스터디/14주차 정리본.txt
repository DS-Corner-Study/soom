# 14주차 스터디

# 16장 리덕스 라이브러리 이해하기

## 16.1 개념 미리 정리하기

### 16.1.1 액션

액션은 하나의 객체로 표현된다.

```jsx
{
  type: 'TOGGLE_VALUE'
}
```

액션 객체: type 필드 필수! (액션의 이름)

### 16.1.2 액션 생성 함수

***액션 생성 함수***

- 액션 객체를 만들어 주는 함수

```jsx
function addTodo(data) {
return {
    type: 'ADD_TODO',
  data
};
}

// 화살표 함수로도 만들 수 있습니다.
const changeInput = text => ({
  type: 'CHANGE_INPUT',
text
});
```

### 16.1.3 리듀서

***리듀서***

- 변화를 일으키는 함수

```jsx
const initialState = {
  counter: 1
};
function reducer(state = initialState, action) {
switch (action.type) {
  case INCREMENT:
    return {
        counter: state.counter + 1
    };
  default:
    return state;
}
}
```

### 16.1.4 스토어

***스토어***

- 프로젝트에 리덕스를 적용하기 위한 것
- 어플리케이션 상태, 리듀서 (+ 중요한 내장 함수)

### 16.1.5 디스패치

***디스패치***

- 스토어 내장 함수
- 액션을 발생 시키는 것
- 액션 객체를 파라미터로 넣어서 호출한다.
- 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만든다.

### 16.1.6 구독

***구독***

- 스토어 내장 함수

```jsx
const listener = () => {
console.log('상태가 업데이트됨');
}
const unsubscribe = store.subscribe(listener);

unsubscribe(); // 추후 구독을 비활성화할 때 함수를 호출
```

구독 함수 안에 리스너 함수를 파라미터로 넣어서 호출한다.

→ 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출된다.

## **16.2 리액트 없이 쓰는 리덕스**

***리덕스*** 

- 다른 UI 라이브러리/프레임워크와 함께 사용 가능
- 바닐라 JS와 함께 사용 가능

***바닐라 JS***

- 라이브러리, 프레임워크 없이 사용하는 순수 JS

### 16.2.1 Parcel로 프로젝트 만들기

**설치 방법**

`$ yarn global add parcel-bundler`

→ 이거 잘 안되니까

`$ npm install -g parcel-bundler`

→ 이걸로 하자!

`$ mkdir vanilla-redux`

`$ cd vanilla-redux`

`$ yarn init -y` 

→ package.json 파일이 생성됩니다요~

```jsx
<html>
  <body>
    <div>바닐라 자바스크립트</div>
    <script src="./index.js"></script>
  </body>
</html>
```

```jsx
console.log('hello parcel');
```

`$ parcel index.html` 

→ 서버가 실행됩니다!

`$ yarn add redux`

→ 리덕스 모듈 설치

### 16.2.2 간단한 UI 구성하기

```css
.toggle {
  border: 2px solid black;
  width: 64px;
  height: 64px;
  border-radius: 32px;
  box-sizing: border-box;
}

.toggle.active {
  background: yellow;
}
```

```jsx
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="index.css" />
  </head>
  <body>
    <div class="toggle"></div>
    <hr />
    <h1>0</h1>
    <button id="increase">+1</button>
    <button id="decrease">-1</button>
    <script src="./index.js"></script>
  </body>
</html>
```

### 16.2.3 DOM 레퍼런스 만들기

별도의 라이브러리가 없어서 DOM을 직접 수정해야 한다.

```jsx
const divToggle = document.querySelector('.toggle');
const counter = document.querySelector('h1');
const btnIncrease = document.querySelector('#increase');
const btnDecrease = document.querySelector('#decrease');
```

### 16.2.4 액션 타입과 액션 생성 함수 정의

***액션, 프로젝트 상태에 변화를 일으키는 것***

- 액션 이름은 문자열, 대문자, 고유성, 중복X

```jsx
const TOGGLE_SWITCH = 'TOGGLE_SWITCH';
const INCREASE = 'INCREASE';
const DECREASE = 'DECREASE';
```

- 액션 객체는 type 값이 필요하다.
- 이 액션 이름을 사용하여 액션 객체를 만드는 액션 생성 함수를 만들기

```jsx
const toggleSwitch = () => ({ type: TOGGLE_SWITCH });
const increase = difference => ({ type: INCREASE, difference });
const decrease = () => ({ type: DECREASE });
```

### 16.2.5 초깃값 설정

```jsx
const initialState = {
  toggle: false,
  counter: 0
};
```

### 16.2.6 리듀서 함수 정의

***리듀서, 변화를 일으키는 함수***

- 함수의 파라미터: state, action

```jsx
// state가 undefined일 때는 initialState를 기본값으로 사용
function reducer(state = initialState, action) {
  // action.type에 따라 다른 작업을 처리함
  switch (action.type) {
    case TOGGLE_SWITCH:
      return {
        ...state, // 불변성 유지를 해 주어야 합니다.
        toggle: !state.toggle
      };
    case INCREASE:
      return {
        ...state,
        counter: state.counter + action.difference
      };
    case DECREASE:
      return {
        ...state,
        counter: state.counter - 1
      };
    default:
      return state;
  }
}
```

### 16.2.7 스토어 만들기

***createStore*** 함수를 사용해야 한다.

- 코드 상단에 import 구문으로 리덕스에서 해당 함수 불러오기
- 함수의 파라미터에 리듀서 함수를 넣어주기

```jsx
import { legacy_createStore as createStore } from "redux";
/* 취소선 오류 해결 */
(...)
const store = createStore(reducer);
```

### 16.2.8 render 함수 만들기

***render***

- 상태가 업데이트될 때마다 호출됨
- ≠ 리액트 render
- html을 사용하여 만들어진 UI의 속성을 상태에 따라 변경해준다.

```jsx
const render = () => {
  const state = store.getState(); // 현재 상태를 불러옵니다.
  // 토글 처리
  if (state.toggle) {
    divToggle.classList.add('active');
  } else {
    divToggle.classList.remove('active');
  }
  // 카운터 처리
  counter.innerText = state.counter;
};

render();
```

### 16.2.9 구독하기

스토어의 상태가 바뀔 때마다 render 함수가 호출되도록 하기

→ 스토어의 내장 함수 ***subscribe***를 사용하여 수행하기

- ***subscribe*** 함수의 파라미터: 함수 형태의 값

```jsx
store.subscribe(render);
```

### 16.2.10 액션 발생시키기

***디스패치, 액션을 발생시키는 것***

- 스토어의 내장 함수 dispatch 사용
- 파라미터: 액션 객체

```jsx
(...)
divToggle.onclick = () => {
  store.dispatch(toggleSwitch());
};
btnIncrease.onclick = () => {
  store.dispatch(increase(1));
};
btnDecrease.onclick = () => {
  store.dispatch(decrease());
};
```

→ DOM 요소에 클릭 이벤트 설정

→ 이벤트 함수 내부에서 dispatch 함수를 사용하여 액션을 스토어에게 전달

## **16.3 리덕스의 세 가지 규칙**

### 16.3.1 단일 스토어

하나의 애플리케이션 안에는 하나의 스토어만!

### 16.3.2 읽기 전용 상태

- 리덕스 상태: 읽기 전용
- 상태 업데이트할 때: 수정X, 새로운 객체 생성하기
- 불변성 유지 → 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교 검사를 한다.

### 16.3.3 리듀서는 순수한 함수

***리듀서 함수***

- 파라미터: 이전 상태, 액션 객체
- 파라미터 외의 값에 의존X
- 이전 상태 건드림X, 새로운 상태 객체 생성 후 반환
- 똑같은 파라미터로 호출된 리듀서 함수 → 언제나 같은 값 반환

## 16.4 정리

**리덕스 코드의 작성 흐름**

1. 액션 타입, 액션 생성 함수 작성하기
2. 리듀서 작성하기
3. 스토어 생성하기

# 17장 **리덕스를 사용하여 리액트 애플리케이션 상태 관리하기**

## **17.1 작업 환경 설정**

`$ yarn create react-app react-redux-tutorial`

`$ cd react-redux-tutorial`

`$ yarn add redux react-redux`

Prettier 적용하기

```jsx
{
  "singleQuote": true,
  "semi": true,
  "useTabs": false,
  "tabWidth": 2,
  "trailingComma": "all",
  "printWidth": 80
}
```

## **17.2 UI 준비하기**

***프레젠테이셔널 컴포넌트***

- 상태 관리가 이루어지지 않음
- props를 받아 와서 화면에 UI를 보여 주기만 하는 컴포넌트

***컨테이너 컴포넌트***

- 리덕스와 연동되어 있는 컴포넌트
- 리덕스로부터 상태 받아오기
- 리덕스 스토어에 액션을 디스패치 하기

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6e91f198-8ab1-4084-8764-bcd7b8ca4af6/3ef1559e-9072-4965-ac51-52ccab7faf90/Untitled.png)

프레젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리하기!

→ UI에 관련된 프레젠테이셔널 컴포넌트는 src/components 경로에 저장하기

→ 리덕스와 연동된 컨테이너 컴포넌트는 src/containers 컴포넌트에 작성하기

### 17.2.1 카운터 컴포넌트 만들기

```jsx
import React from 'react';

const Counter = ({ number, onIncrease, onDecrease }) => {
  return (
    <div>
      <h1>{number}</h1>
      <div>
        <button onClick={onIncrease}>+1</button>
        <button onClick={onDecrease}>-1</button>
      </div>
    </div>
  );
};

export default Counter;
```

```jsx
import React from 'react';
import Counter from './components/Counter';

const App = () => {
  return (
    <div>
      <Counter number={0} />
    </div>
  );
};

export default App;
```

`$ yarn start` → 서버 실행하기

## 17.2.2 할 일 목록 컴포넌트 만들기

```jsx
import React from 'react';

const TodoItem = ({ todo, onToggle, onRemove }) => {
  return (
    <div>
      <input type="checkbox" />
      <span>예제 텍스트</span>
      <button>삭제</button>
    </div>
  );
};

const Todos = ({
  input, // 인풋에 입력되는 텍스트
  todos, // 할 일 목록이 들어 있는 객체
  onChangeInput,
  onInsert,
  onToggle,
  onRemove,
}) => {
  const onSubmit = e => {
    e.preventDefault();
  };
  return (
    <div>
      <form onSubmit={onSubmit}>
        <input />
        <button type="submit">등록</button>
      </form>
      <div>
        <TodoItem />
        <TodoItem />
        <TodoItem />
        <TodoItem />
        <TodoItem />
      </div>
    </div>
  );
};

export default Todos;
```

```jsx
import React from 'react';
import Counter from './components/Counter';
import Todos from './components/Todos';

const App = () => {
  return (
    <div>
      <Counter number={0} />
      <hr />
      <Todos />
    </div>
  );
};

export default App;
```

## **17.3 리덕스 관련 코드 작성하기**

***리덕스 관련 코드***

- 액션 타입
- 액션 생성 함수
- 리듀서 코드

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6e91f198-8ab1-4084-8764-bcd7b8ca4af6/005bf7c4-eb1d-4021-a3c6-014a1aabca4b/Untitled.png)

→ 일반적인 구조 (디렉토리 3개, 기능별로 파일 생성)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/6e91f198-8ab1-4084-8764-bcd7b8ca4af6/a0b51928-e2f8-469b-9690-40414523b201/Untitled.png)

→ Ducks 패턴 (기능별로 파일 하나에 몰아서 작성)

## 17.3.1 counter 모듈 작성하기

***모듈: Ducks 패턴을 사용하여 액션 타입, 액션 생성 함수, 리듀서를 작성한 코드***

### 17.3.1.1 액션 타입 정의하기

```jsx
const INCREASE = 'counter/INCREASE';
const DECREASE = 'counter/DECREASE';
```

- 액션 타입 (이름) : 대문자
- 내용: ‘모듈 이름/액션 이름’

### 17.3.1.2 액션 생성 함수 만들기

```jsx
export const increase = () => ({ type: INCREASE });
export const decrease = () => ({ type: DECREASE });
```

***export:*** 다른 파일에서 사용 가능

### 17.3.1.3 초기 상태 및 리듀서 함수 만들기

```jsx
const initialState = {
  number: 0 /* 초기값 0 */
};

function counter(state = initialState, action) {
  switch (action.type) {
    case INCREASE:
      return {
        number: state.number + 1
      };
    case DECREASE:
      return {
        number: state.number - 1
      };
    default:
      return state;
  }
}

export default counter; //함수 내보내기
```

- export, 여러 개를 내보낼 수 있다.
- export default, 한 개만 내보낼 수 있다.

### 17.3.2 todos 모듈 만들기

```jsx
const CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함
const INSERT = 'todos/INSERT'; // 새로운 todo를 등록함
const TOGGLE = 'todos/TOGGLE'; // todo를 체크/체크 해제함
const REMOVE = 'todos/REMOVE'; // todo를 제거함
```

### 17.3.2.2 액션 생성 함수 만들기

**액션 생성 함수**에서 **파라미터**가 ****필요하다

→ 파라미터는 액션 객체 안에 있는 **추가 필드**로 들어간다.

```jsx
export const changeInput = input => ({
  type: CHANGE_INPUT,
  input
});

let id = 3; // insert가 호출될 때마다 1씩 더해집니다.
export const insert = text => ({
  type: INSERT,
  todo: {
    id: id++,
    text,
    done: false
  }
});

export const toggle = id => ({
  type: TOGGLE,
  id
});

export const remove = id => ({
  type: REMOVE,
  id
});
```

### 17.3.2.3 초기 상태 및 리듀서 함수 만들기

⚠️***spread 연산자(…)***⚠️

```jsx
(...)
const initialState = {
  input: '',
  todos: [
    {
      id: 1,
      text: '리덕스 기초 배우기',
      done: true
    },
    {
      id: 2,
      text: '리액트와 리덕스 사용하기',
      done: false
    }
  ]
};

function todos(state = initialState, action) {
  switch (action.type) {
    case CHANGE_INPUT:
      return {
        ...state,
        input: action.input
      };
    case INSERT:
      return {
        ...state,
        todos: state.todos.concat(action.todo)
      };
    case TOGGLE:
      return {
        ...state,
        todos: state.todos.map(todo =>
          todo.id === action.id ? { ...todo, done: !todo.done } : todo
        )
      };
    case REMOVE:
      return {
        ...state,
        todos: state.todos.filter(todo => todo.id !== action.id)
      };
    default:
      return state;
  }
}

export default todos;
```

### 17.3.3 루트 리듀서 만들기

기존 리듀서 하나로 합치기

→ ***combineReducers*** 유틸 함수 사용하기

```jsx
import { combineReducers } from 'redux';
import counter from './counter';
import todos from './todos';

const rootReducer = combineReducers({
  counter,
  todos,
});

export default rootReducer;
```

불러올 때: `import rootReducer from './modules';`

## **17.4 리액트 애플리케이션에 리덕스 적용하기**

### 17.4.1 스토어 만들기

```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import { createStore } from 'redux';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';
import rootReducer from './modules';

const store = createStore(rootReducer);

ReactDOM.render(<App />, document.getElementById('root'));

serviceWorker.unregister();
```

### 17.4.2 Provider 컴포넌트를 사용하여 프로젝트에 리덕스 적용하기

리액트 컴포넌트에서 스토어 사용하기 → ***Provider*** 컴포넌트로 감싸주기

🛑store를 props로 전달해 주어야 한다.

```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';
import rootReducer from './modules';

const store = createStore(rootReducer);

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root'),
);

serviceWorker.unregister();
```

### 17.4.3 Redux DevTools의 설치 및 적용

크롬 웹 스토어 https://chrome.google.com/webstore

→ Redux DevTools 설치

`$ yarn add redux-devtools-extension`

→ 코드가 깔끔해져요~

⚠️오류 방지: src 안에 **serviceWorker.js 생성 후 복붙**

```jsx
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read http://bit.ly/CRA-PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.1/8 is considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit http://bit.ly/CRA-PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl)
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(registration => {
      registration.unregister();
    });
  }
}
```

## **17.5 컨테이너 컴포넌트 만들기**

***컨테이너 컴포넌트: 리덕스 스토어와 연동된 컴포넌트***

```jsx
import React from 'react';
import Counter from '../components/Counter';

const CounterContainer = () => {
  return <Counter />;
};

export default CounterContainer;
```

`connect(mapStateToProps, mapDispatchToProps)(연동할 컴포넌트)`

***mapStateToProps:*** 

리덕스 스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수

***mapDispatchToProps:***

액션 생성 함수를 컴포넌트의 props로 넘겨주기 위해 사용하는 함수

connect 함수 호출 후 다른 함수 반환

→ 반환된 함수에 컴포넌트를 파라미터로 넣기

→ 리덕스와 연동된 컴포넌트 생성됨

**정리**

`const makeContainter = connect(mapStateToProps, mapDispatchToProps)`

`makeContainter(타깃 컴포넌트)`

```jsx
import React from 'react';
import { connect } from 'react-redux';
import Counter from '../components/Counter';

const CounterContainer = ({ number, increase, decrease }) => {
  return (
    <Counter number={number} onIncrease={increase} onDecrease={decrease} />
  );
};

const mapStateToProps = state => ({
  number: state.counter.number,
});
const mapDispatchToProps = dispatch => ({
  // 임시 함수
  increase: () => {
    console.log('increase');
  },
  decrease: () => {
    console.log('decrease');
  },
});
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(CounterContainer);
```

```jsx
import React from 'react';
import Todos from './components/Todos';
import CounterContainer from './containers/CounterContainer';

const App = () => {
  return (
    <div>
      <CounterContainer />
      <hr />
      <Todos />
    </div>
  );
};

export default App;
```

```jsx
import React from 'react';
import { connect } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease } from '../modules/counter'; // 추가됨

const CounterContainer = ({ number, increase, decrease }) => {
  return (
    <Counter number={number} onIncrease={increase} onDecrease={decrease} />
  );
};

const mapStateToProps = state => ({
  number: state.counter.number,
});
const mapDispatchToProps = dispatch => ({
  increase: () => {
    dispatch(increase()); /* 추가됨 */
  },
  decrease: () => {
    dispatch(decrease()); /* 추가됨 */
  },
});
export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(CounterContainer);
```

```jsx
export default connect(
  state => ({
    number: state.counter.number,
  }),
  dispatch => ({
    increase: () => dispatch(increase()),
    decrease: () => dispatch(decrease()),
  }),
)(CounterContainer);
```

→ 불필요한 코드 블록 생략 (작동 방식 동일)

`increase: () => dispatch(increase()),`

`increase: () => { return dispatch(increase()) },`

***bindActionCreators 유틸 함수 사용***

→ 액션 생성 함수 개수가 많을 때

```jsx
import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease } from '../modules/counter';

const CounterContainer = ({ number, increase, decrease }) => {
  return (
    <Counter number={number} onIncrease={increase} onDecrease={decrease} />
  );
};

export default connect(
  state => ({
    number: state.counter.number,
  }),
  dispatch =>
    bindActionCreators(
      {
        increase,
        decrease,
      },
      dispatch,
    ),
)(CounterContainer);
```

***mapDispatchToProps***에 해당하는 파라미터

→ 함수 형태 X

→ 액션 생성 함수로 이루어진 객태

```jsx
export default connect(
  state => ({
    number: state.counter.number,
  }),
  {
    increase,
    decrease,
  },
)(CounterContainer);
```

*내부적으로 bindActionCreators 작업을 대신 해준다!*

### 17.5.2 TodosContainer 만들기

- ***connect*** 함수 사용
- ***mapDispatchToProps***를 짧고 간단하게 쓰는 방법을 적용

```jsx
import React from 'react';
import { connect } from 'react-redux';
import { changeInput, insert, toggle, remove } from '../modules/todos';
import Todos from '../components/Todos';

const TodosContainer = ({
  input,
  todos,
  changeInput,
  insert,
  toggle,
  remove,
}) => {
  return (
    <Todos
      input={input}
      todos={todos}
      onChangeInput={changeInput}
      onInsert={insert}
      onToggle={toggle}
      onRemove={remove}
    />
  );
};

export default connect(
  // 비구조화 할당을 통해 todos를 분리하여
  // state.todos.input 대신 todos.input을 사용
  ({ todos }) => ({
    input: todos.input,
    todos: todos.todos,
  }),
  {
    changeInput,
    insert,
    toggle,
    remove,
  },
)(TodosContainer);
```

```jsx
import React from 'react';
import CounterContainer from './containers/CounterContainer';
import TodosContainer from './containers/TodosContainer';

const App = () => {
  return (
    <div>
      <CounterContainer />
      <hr />
      <TodosContainer />
    </div>
  );
};

export default App;
```

Todos 컴포넌트에서 받아 온 props를 사용하도록 구현하기

```jsx
import React from 'react';

const TodoItem = ({ todo, onToggle, onRemove }) => {
  return (
    <div>
      <input
        type="checkbox"
        onClick={() => onToggle(todo.id)}
        checked={todo.done}
        readOnly={true}
      />
      <span style={{ textDecoration: todo.done ? 'line-through' : 'none' }}>
        {todo.text}
      </span>
      <button onClick={() => onRemove(todo.id)}>삭제</button>
    </div>
  );
};

const Todos = ({
  input, // 인풋에 입력되는 텍스트
  todos, // 할 일 목록이 들어 있는 객체
  onChangeInput,
  onInsert,
  onToggle,
  onRemove,
}) => {
  const onSubmit = e => {
    e.preventDefault();
    onInsert(input);
    onChangeInput(''); // 등록 후 인풋 초기화
  };
  const onChange = e => onChangeInput(e.target.value);
  return (
    <div>
      <form onSubmit={onSubmit}>
        <input value={input} onChange={onChange} />
        <button type="submit">등록</button>
      </form>
      <div>
        {todos.map(todo => (
          <TodoItem
            todo={todo}
            key={todo.id}
            onToggle={onToggle}
            onRemove={onRemove}
          />
        ))}
      </div>
    </div>
  );
};

export default Todos;
```

## **17.6 리덕스 더 편하게 사용하기**

- redux-actions 라이브러리 사용
- immer 라이브러리 사용

### 17.6.1 redux-actions

`$ yarn add redux-actions`

### 17.6.1.1 counter 모듈에 적용하기

***createAction*** 함수 사용

```jsx
import { createAction } from 'redux-actions';

const INCREASE = 'counter/INCREASE';
const DECREASE = 'counter/DECREASE';

export const increase = createAction(INCREASE);
export const decrease = createAction(DECREASE);

(...)
```

***handleActions*** 함수 사용

- 첫 번째 파라미터: 각 액션에 대한 업데이트 함수를 넣기
- 두 번째 파라미터: 초기 상태를 넣기

```jsx
import { createAction, handleActions } from 'redux-actions';

const INCREASE = 'counter/INCREASE';
const DECREASE = 'counter/DECREASE';

export const increase = createAction(INCREASE);
export const decrease = createAction(DECREASE);

const initialState = {
  number: 0,
};

const counter = handleActions(
  {
    [INCREASE]: (state, action) => ({ number: state.number + 1 }),
    [DECREASE]: (state, action) => ({ number: state.number - 1 }),
  },
  initialState,
);

export default counter;
```

### 17.6.1.2 todos 모듈에 적용하기

액션 생성 함수에서 각각의 파라미터를 필요로 한다.

→ 두 번째 함수에 정의하는 함수를 따로 선언해서 넣기

```jsx
import { createAction } from 'redux-actions';

const CHANGE_INPUT = 'todos/CHANGE_INPUT'; // 인풋 값을 변경함
const INSERT = 'todos/INSERT'; // 새로운 todo를 등록함
const TOGGLE = 'todos/TOGGLE'; // todo를 체크/체크 해제함
const REMOVE = 'todos/REMOVE'; // todo를 제거함

export const changeInput = createAction(CHANGE_INPUT, input => input);

let id = 3; // insert가 호출될 때마다 1씩 더해집니다.
export const insert = createAction(INSERT, text => ({
  id: id++,
  text,
  done: false,
}));

export const toggle = createAction(TOGGLE, id => id);
export const remove = createAction(REMOVE, id => id);

(...)
```

액션 생성 함수

- 액션에 필요한 추가 데이터를 payload라는 이름으로 사용한다.
- 모두 공통적으로 action.payload 값을 조회하도록 리듀서를 구현하기

```jsx
import { createAction, handleActions } from 'redux-actions';

(...)

const todos = handleActions(
  {
    [CHANGE_INPUT]: (state, { payload: input }) => ({ ...state, input }),
    [INSERT]: (state, { payload: todo }) => ({
      ...state,
      todos: state.todos.concat(todo),
    }),
    [TOGGLE]: (state, { payload: id }) => ({
      ...state,
      todos: state.todos.map(todo =>
        todo.id === id ? { ...todo, done: !todo.done } : todo,
      ),
    }),
    [REMOVE]: (state, { payload: id }) => ({
      ...state,
      todos: state.todos.filter(todo => todo.id !== id),
    }),
  },
  initialState,
);

export default todos;
```

## 17.6.2 immer

`$ yarn add immer`

```jsx
import { createAction, handleActions } from 'redux-actions';
import produce from 'immer';

(...)

const todos = handleActions(
  {
    [CHANGE_INPUT]: (state, { payload: input }) =>
      produce(state, draft => {
        draft.input = input;
      }),
    [INSERT]: (state, { payload: todo }) =>
      produce(state, draft => {
        draft.todos.push(todo);
      }),
    [TOGGLE]: (state, { payload: id }) =>
      produce(state, draft => {
        const todo = draft.todos.find(todo => todo.id === id);
        todo.done = !todo.done;
      }),
    [REMOVE]: (state, { payload: id }) =>
      produce(state, draft => {
        const index = draft.todos.findIndex(todo => todo.id === id);
        draft.todos.splice(index, 1);
      }),
  },
  initialState,
);

export default todos;
```

## **17.7 Hooks를 사용하여 컨테이너 컴포넌트 만들기**

***connect*** 함수를 사용하는 대신 react-redux에서 제공하는 ***Hooks***를 사용하기

### 17.7.1 useSelector로 상태 조회하기

connect 함수를 사용하지 않고도 리덕스의 상태를 조회할 수 있다.

`const 결과 = useSelector(상태 선택 함수);`

***CounterContainer***에서 ***connect*** 함수 대신 ***useSelector***를 사용하자

→ ***counter.number*** 값을 조회함으로써 Counter에게 props를 넘겨준다.

```jsx
import React from 'react';
import { useSelector } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease } from '../modules/counter';

const CounterContainer = () => {
  const number = useSelector(state => state.counter.number);
  return <Counter number={number} />;
};

export default CounterContainer;
```

### 17.7.2 useDispatch를 사용하여 액션 디스패치하기

컴포넌트 내부에서 스토어의 내장 함수 dispatch를 사용할 수 있게 해준다.

`const dispatch = useDispatch();`

`dispatch({ type: 'SAMPLE_ACTION' });`

```jsx
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease } from '../modules/counter';

const CounterContainer = () => {
  const number = useSelector(state => state.counter.number);
  const dispatch = useDispatch();
  return (
    <Counter
      number={number}
      onIncrease={() => dispatch(increase())}
      onDecrease={() => dispatch(decrease())}
    />
  );
};

export default CounterContainer;
```

컴포넌트 성능을 최적화하기

 → ***useCallback***으로 액션을 디스패치하는 함수를 감싸 준다.

```jsx
import React, { useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Counter from '../components/Counter';
import { increase, decrease } from '../modules/counter';

const CounterContainer = () => {
  const number = useSelector(state => state.counter.number);
  const dispatch = useDispatch();
  const onIncrease = useCallback(() => dispatch(increase()), [dispatch]);
  const onDecrease = useCallback(() => dispatch(decrease()), [dispatch]);
  return (
    <Counter number={number} onIncrease={onIncrease} onDecrease={onDecrease} />
  );
};

export default CounterContainer;
```

✔️**useDispatch**과 **useCallback**을 함께 사용하자!

### 17.7.3 useStore를 사용하여 리덕스 스토어 사용하기

컴포넌트 내부에서 리덕스 스토어 객체를 직접 사용할 수 있다.

`const store = useStore();`

`store.dispatch({ type: 'SAMPLE_ACTION '});`

`store.getState();`

### 17.7.4 TodosContainer를 Hooks로 전환하기

***TodosContainer***

→ ***connect*** 함수 대신에 ***useSelector***와 ***useDispatch***를 사용!

```jsx
import React, { useCallback } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { changeInput, insert, toggle, remove } from '../modules/todos';
import Todos from '../components/Todos';

const TodosContainer = () => {
  const { input, todos } = useSelector(({ todos }) => ({
    input: todos.input,
    todos: todos.todos
  }));
  const dispatch = useDispatch();
  const onChangeInput = useCallback(input => dispatch(changeInput(input)), [
    dispatch
  ]);
  const onInsert = useCallback(text => dispatch(insert(text)), [dispatch]);
  const onToggle = useCallback(id => dispatch(toggle(id)), [dispatch]);
  const onRemove = useCallback(id => dispatch(remove(id)), [dispatch]);

  return (
    <Todos
      input={input}
      todos={todos}
      onChangeInput={onChangeInput}
      onInsert={onInsert}
      onToggle={onToggle}
      onRemove={onRemove}
    />
  );
};

export default TodosContainer;
```

### 17.7.5 useActions 유틸 Hook을 만들어서 사용하기

여러 개의 액션을 사용해야 하는 경우 코드가 훨씬 깔끔해요~ 

```jsx
import { bindActionCreators } from 'redux';
import { useDispatch } from 'react-redux';
import { useMemo } from 'react';

export default function useActions(actions, deps) {
  const dispatch = useDispatch();
  return useMemo(
    () => {
      if (Array.isArray(actions)) {
        return actions.map(a => bindActionCreators(a, dispatch));
      }
      return bindActionCreators(actions, dispatch);
    },
    deps ? [dispatch, ...deps] : deps
  );
}
```

***useActions***

- 첫 번째 파라미터: 액션 생성 함수 배열
- 두 번째 파라미터: deps 배열
- 액션 생성 함수 → 액션을 디스패치하는 함수로 변환!
1. 액션 생성 함수를 사용하여 액션 객체 생성
2. 액션 객체를 스토어에 디스패치하는 작업을 해주는 함수를 만들어 준다.

```jsx
import React from 'react';
import { useSelector } from 'react-redux';
import { changeInput, insert, toggle, remove } from '../modules/todos';
import Todos from '../components/Todos';
import useActions from '../lib/useActions';

const TodosContainer = () => {
  const { input, todos } = useSelector(({ todos }) => ({
    input: todos.input,
    todos: todos.todos
  }));

  const [onChangeInput, onInsert, onToggle, onRemove] = useActions(
    [changeInput, insert, toggle, remove],
    []
  );
  return (
    <Todos
      input={input}
      todos={todos}
      onChangeInput={onChangeInput}
      onInsert={onInsert}
      onToggle={onToggle}
      onRemove={onRemove}
    />
  );
};

export default TodosContainer;
```

### 17.7.6 connect 함수와의 주요 차이점

***connect*** 함수를 사용하여 컨테이너 컴포넌트를 만들었을 경우

**When** 해당 컨테이너의 컴포넌트의 부모 컴포넌트가 리렌더링될 때

**If** 해당 컨테이너 컴포넌트의 props가 바뀌지 않았다면

**Do** 리렌더링이 자동으로 방지되어 성능이 최적화된다.

***useSelector***를 사용하여 리덕스 상태를 조회했을 경우

- 최적화 작업 자동 X
- 성능 최적화를 위해 React.memo를 테이너 컴포넌트에 사용해주기

```jsx
import React from 'react';
import { useSelector } from 'react-redux';
import { changeInput, insert, toggle, remove } from '../modules/todos';
import Todos from '../components/Todos';
import useActions from '../lib/useActions';

const TodosContainer = () => {
  (...)
};

export default React.memo(TodosContainer);
```

## **17.8 정리**

**If**  리액트 프로젝트에서 리덕스를 사용하면

**Do** 업데이트에 관련된 로직을 리액트 컴포넌트에서 완벽하게 분리시킬 수 있다.

→ 유지 보수성이 높은 코드를 작성해 낼 수 있다.