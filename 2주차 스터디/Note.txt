[1. 자바스크립트 기초] 

let: 이름 중복 사용 불가능 (추천)
var: 중복 사용 가능 / But 코드 복잡도 상승
const: 상수 값 변경 불가능

변수
1) 숫자로 시작할 수 없음
2) 특수 기호 $ 또는 _ 사용 가능
3) 대소 문자를 구별함
4) 카멜 표기법(맨 첫 글자는 소문자 표기+파스칼 표기법), 
파스칼 표기법(단어의 첫 글자를 대문자로 표기), 
스네이크 표기법(단어 사이에 '_' 사용)

숫자형
Infinity(양의 무한대), -Infinity(음의 무한대)
주로 최솟값이나 최댓값을 구할 때 사용
1 / 0 -> Infinity
NaN(Not a Number) - 표현이 불가능한 숫자형

문자형
"", '', ``(백틱) 사용 가능
템플릿 리터럴(백틱으로 감싼 문자열): ${} 안에 있는 변숫값도 문자열로 변환
EX) let name = "숨숨";
let greeting = `Hi ${name}!`;
console.log(greeting);
--> Hi 숨숨!

함수 parseInt: (문자열, 진수)안에 있는 문자열을 입력한 진수의 숫자로 변환하는 내장 함수
But 문자열이 문자로 시작하면 NaN 반환
EX) let a = "2023년";
let b = "연도2023";
let numA = parseInt(a, 10);
let numB = parseInt(b, 10);
console.log(numA, numB);
--> 2023 NaN

비교 연산자
1) === 같다 (값과 자료형 둘다 비교)
2) !== 같지 않다

null 병합 연산자 
변수 ?? 변수: 값이 확정된 변수를 반환 (둘다 확정일 경우 왼쪽)

삼항 조건 연산자
조건문 ? 참인 경우의 명령어 : 거짓인 경우의 명령어

{8. 함수}

함수란? 공통으로 사용하는 유사 코드를 하나로 묶은 것

function 함수명 (매개변수) {
 실행할 명령어
 return 변수; //함수 반환&종료
}
함수명(); //함수 호출

중첩 함수 가능

호이스팅(hoisting): 함수 호출 코드가 함수 선언 코드보다 위에 있어도 동작 가능
이유: 코드를 실행하기 전 준비 단계를 거치는 자바스크립트의 내부 알고리즘

함수 표현식 (호이스팅 불가능)
let 함수명 = function () {
 실행할 명령어
};

콜백 함수(Callback Function or 고차 함수HOF): 함수를 인자로 받거나 결과로 반환하는 함수
function 함수명1(매개변수) {
 실행할 명령어
 함수명2();
}
function 함수명2() {
 실행할 명령어
}
함수명1(함수명2);
--> 함수1 실행 후, 함수2 실행

함수 표현식을 이용한 콜백 함수 가능
function 함수명1(매개변수1, 매개변수2) {
 실행할 명령어
}
함수명1(변수, function (매개변수1) {
 실행할 명령어
});

화살표 함수
let 함수명 = (매개변수) => 반환값;

let 함수명 = (매개변수) => {
 let 변수명 = 반환값;
 return 변수명;
}; //화살표 함수 본문에 중괄호를 사용하면, return문을 써야함 

{9. 스코프}

스코프란? 변수나 함수에 접근하거나 호출할 수 있는 범위

전역 변수/함수: 함수 외부 선언
지역 변수/함수: 함수 내부 선언

블록 스코프: 블록{} 내부에서 선언한 변수가 갖는 스코프
함수 스코프: 함수 내부에서 선언한 변수가 갖는 스코프

var 선언 변수: 함수 스코프(함수 내부에서 선언한 변수만 지역 스코프)
--> 블록 내부에서 선언을 해도 외부에서 접근 가능 (=전역 스코프, 추천 X)

{10. 객체}

객체란? 다양한 값을 담는 자료형

객체 리터럴
let 객체명 = { 프로퍼티 };

객체 생성자
let 객체명 = new Object();

프로퍼티(key: value)
key: 문자형
if) 중복된 key, 마지막 key 채택
"복수 단어 key" 따옴표로 묶어 주기

프로퍼티 접근
점 표기법
const 변수명 = 객체명.key;

괄호 표기법
const 변수명 = 객체명["key"];

프로퍼티 추가
점 표기법(key가 고정적)
객체명.key = value;

괄호 표기법(key가 유동적)
객체명["key"] = value;

if) key, value가 유동적일 경우
function 함수명(객체명, key, value) {
 객체명[key] = value;
}
let 객체명 = {};
함수명(객체명, "key", value);

프로퍼티 수정
점 표기법
객체명.key = value;

괄호 표기법
객체명["key"] = value;

프로퍼티 삭제
점 표기법
delete 객체명.key;

괄호 표기법
delete 객체명["key"];

const로 선언한 상수 객체도 수정 가능

in 연산자(프로퍼티 존재 여부 확인)
let 객체명 { 프로퍼티 };
let 변수 = "존재하지않는 key" in 객체명;
--> 변수 == false

메서드: 값(value)가 함수인 프로퍼티
let 변수명 = { 
 key: function () {
  실행할 명령어
 }
};

{11. 배열}

배열이란? 순서가 있는 요소의 집합 / 여러 개의 항목을 담는 리스트

배열 생성자
let 배열명 = new Array();

배열 리터럴
let 배열명 = [];

배열과 객체의 공통점
여러 데이터를 저장할 수 있다.
데이터의 자료형에 제약이 없다.

배열과 객체의 차이점
객체는 key가 있다 / 데이터에 접근할 때 key 사용
배열은 key가 없다 / 데이터에 접근할 때 인덱스 사용

배열 인덱스
let 배열명 = [변수1, 변수2];
배열명[0] = 변수0; //변숫값 수정
배열명[3] = 변수3; //변수 생성

[2. 자바스크립트 생성]
{1. truthy&falsy}

truthy&falsy란? boolean이 아니라도 참(truthy), 거짓(falsy)으로 평가하는 특징

falsy한 값: undefined, null, 0, -0, NaN, " "(빈 문자열), 0n(Biglnt-길이 제약 없는 숫자형)
truthy한 값: falsy한 값 제외("false" 문자열 자체는 true로 평가)

let 변수;
const 변수 = -0;
const 변수 = " ";

if (변수) {}  --> 실행 x
else {} --> 실행 o

{2. 단락 평가}

단락 평가란(Short-Circuit Evaluation)? 첫 번째 피연산자의 값만으로 결과가 확실할 때, 두 번째 값을 건너뛰는 것(지름길 평가)

AND 단락 평가(&& 연산자) - 오류 방지하기
첫 번째 값 false면 실행x
if) falsy, 결과: falsy

OR 단락 평가(|| 연산자)
첫 번째 값 true면 실행x
if) truthy, 결과: truthy

OR 단락 평가 != null 병합 연산자

{3. 객체 자료형 자세히 살펴보기}

객체 자료형: 원시 자료형을 제외한 자료형 ( 함수, 배열 등등)

length 프로퍼티
배열.length: 배열 길이

push 메서드
배열.push(값): 배열 맨 뒤에 값 추가

name 프로퍼티
함수명.name: 함수 이름

객체와 참조
객체 자료형- 참조(Reference, 값을 저장한 곳의 주소만 저장하는 것) 기능 이용
let 객체명 = { 프로퍼티 };
let 변수명 = 객체명;
변수.key = value;

참조에 의한 비교(값이 아닌 참조 값(=주소) 비교)
let 객체1 = { 프로퍼티 };
let 객체2 = { 프로퍼티 };
객체1 === 객체2
--> false (value가 같아도 참조 값이 다르다)
! 배열과 함수도 동일하게 적용된다.

{4. 반복문 응용하기}

인덱스를 이용한 순회
for 문, 프로퍼티 length 사용
반복문 종료 조건: i < 배열.length

for...of 문
let 배열 = [];
 for (let 변수 of 배열) {
  console.log(변수);
}
--> 배열 순회

Object.keys를 이용한 순회
let 객체 = { 프로퍼티 };
const 변수 = Object.keys(객체);
console.log(변수); 
--> ["key1", "key2"]

for...of문
let 객체 = { 프로퍼티 };
const 변수1 = Object.keys(객체);
for (let 변수2 of 변수1) {
 console.log(변수2);
}
--> key

괄호 표기법
let 객체 = { 프로퍼티 };
const 변수1 = Object.keys(객체);
for (let 변수2 of 변수1) {
 let 변수3 = 객체[변수2];
 console.log(변수2, 변수3);
}
--> key value

Object.values를 이용한 value 순회
let 객체 = { 프로퍼티 };
const 변수1 = Object.values(객체);
for (let 변수2 of 변수1) {
 console.log(변수2);
}
--> value

for...in문
let 객체 = { 프로퍼티 };
const 변수1 = Object.values(객체);
for (let 변수2 in 변수1) {
 const 변수3 = 객체[변수2];
 console.log(변수2, 변수3);
}
--> key value