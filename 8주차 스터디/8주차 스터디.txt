8주차 스터디

# Hooks

- 기존의 함수형 컴포넌트에서 할 수 없었던 다양한 작업을 할 수 있게 해준다.
- 함수형 컴포넌트에서도 상태 관리를 할 수 있는 useState, 렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공한다.

## useState

- 가장 기본적인 Hook이며, 함수형 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해 준다.

### 숫자 카운터

```jsx
import React, { useState } from 'react';
 
const Counter = () => {
  const [value, setValue] = useState(0); // value의 초기 값을 0으로 지정함
 
  return (
    <div>
      <p>
        현재 카운터 값은 <b>{value}</b>입니다.
      </p>
      <button onClick={() => setValue(value + 1)}>+1</button>
      <button onClick={() => setValue(value - 1)}>-1</button>
    </div>
  );
};
 
export default Counter;
```

```jsx
import React from 'react';
import Counter from './Counter';
 
const App = () => {
  return <Counter />;
};
export default App;
```

### useState를 여러 번 사용하기

- 하나의 useState는 하나의 상태 값만 관리할 수 있다.
- 관리해야할 상태가 여러 개일 땐 useState도 여러 개를 사용한다.

```jsx
import React, { useState } from 'react';
 
const Info = () => {
  const [name, setName] = useState('');
  const [nickname, setNickname] = useState('');
 
  const onChangeName = e => {
    setName(e.target.value);
  };
 
  const onChangeNickname = e => {
    setNickname(e.target.value);
  };
 
  return (
    <div>
      <div>
        <input value={name} onChange={onChangeName} />
        <input value={nickname} onChange={onChangeNickname} />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임:</b> {nickname}
        </div>
      </div>
    </div>
  );
};
 
export default Info;
```

```jsx
import React from 'react';
import Info from './Info';
 
const App = () => {
  return <Info />;
};
 
export default App;
```

## useEffect

- 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook이다.
- 클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태이다.

```jsx
import React, { useState, useEffect } from 'react';
 
const Info = () => {
  const [name, setName] = useState('');
  const [nickname, setNickname] = useState('');
  useEffect(() => {
    console.log('렌더링이 완료되었습니다!');
    console.log({
      name,
      nickname
    });
  });
 
  const onChangeName = e => {
    setName(e.target.value);
  };
 
  const onChangeNickname = e => {
    setNickname(e.target.value);
  };
 
  return (
    (...)
  );
};
 
export default Info;
```

### 마운트될 때만 실행 시키기

- 맨 처음 렌더링 될 때만 실행시키기
- 함수의 두 번째 파라미터로 비어 있는 배열을 넣어 주면 된다.

```jsx
useEffect(() => {
    console.log('마운트될 때만 실행됩니다.');
  }, []);
```

### 특정 값이 업데이트될 때만 실행하고 싶을 때

- useEffect의 두 번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값을 넣어 주면 된다.

```jsx
useEffect(() => {
    console.log(name);
  }, [name]);
```

### 뒷정리(cleanup) 함수를 반환하기

- 컴포넌트가 언마운트 되기 전이나 업데이트 되기 직전에 작업을 수행하기 위해서 필수적이다.

```jsx
useEffect(() => {
    console.log('effect'); //컴포넌트가 나타날 때
    console.log(name);
    return () => {
      console.log('cleanup'); //컴포넌트가 사라질 때
      console.log(name);
    };
  });
```

```jsx
import React, { useState } from 'react';
import Info from './Info';
 
const App = () => {
const [visible, setVisible] = useState(false);
return (
  <div>
      <button
      onClick={() => {
        setVisible(!visible);
        }}
      >
        {visible ? '숨기기' : '보이기'}
      </button>
      <hr />
    {visible && <Info />}
    </div>
);
};
 
export default App;
```

### 언마운트될 때만 뒷정리 함수를 호출하기

- useEffect 함수의 두 번째 파라미터에 비어 있는 배열을 넣으면 된다.

```jsx
useEffect(() => {
    console.log('effect');
    console.log(name);
    return () => {
      console.log('cleanup');
      console.log(name);
    };
  }, []);
```

## **useReducer**

- useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook이다.

### reducer

- 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은 액션(action) 값을 전달받아 새로운 상태를 반환하는 함수이다
- 새로운 상태를 만들 때는 반드시 불변성을 지켜 주어야 한다.

```jsx
function reducer(state, action) {
return { ... }; // 불변성을 지키면서 업데이트한 새로운 상태를 반환한다.
}

{
  type: 'INCREMENT',
  // 다른 값들이 필요하다면 추가로 들어감
}
```

### useReducer를 사용하여 Counter 구현하기

```jsx
import React, { useReducer } from 'react';
 
function reducer(state, action) {
  // action.type에 따라 다른 작업 수행
  switch (action.type) {
    case 'INCREMENT':
      return { value: state.value + 1 };
    case 'DECREMENT':
      return { value: state.value - 1 };
    default:
      // 아무것도 해당되지 않을 때 기존 상태 반환
      return state;
  }
}
 
const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { value: 0 });
 
  return (
    <div>
      <p>
        현재 카운터 값은 <b>{state.value}</b>입니다.
      </p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+1</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-1</button>
    </div>
  );
};
 
export default Counter;
```

- useReducer의 첫 번째 파라미터에 reducer 함수를 넣는다.
- useReducer의 두 번째 파라미터에 해당 reducer의 기본값을 넣어 준다.
- state는 현재 가리키고 있는 상태고, dispatch는 액션을 발생시키는 함수이다.
- dispatch는 action과 같은 형태로, 함수 안에 파라미터로 액션 값을 넣어 주면 reducer 함수가 호출되는 구조이다.
- useReducer를 사용했을 때의 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것이다.

### useReducer 사용하여 input 상태 관리하기

```jsx
import React, { useReducer } from 'react';
 
function reducer(state, action) {
  return {
    ...state,
    [action.name]: action.value
  };
}
 
const Info = () => {
  const [state, dispatch] = useReducer(reducer, {
    name: '',
    nickname: ''
  });
  const { name, nickname } = state;
  const onChange = e => {
    dispatch(e.target);
  };
 
  return (
    <div>
      <div>
        <input name="name" value={name} onChange={onChange} />
        <input name="nickname" value={nickname} onChange={onChange} />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임: </b>
          {nickname}
        </div>
      </div>
    </div>
  );
};
 
export default Info;
```

## **useMemo**

- 함수형 컴포넌트 내부에서 발생하는 연산을 최적화할 수 있다.

```jsx
import React, { useState, useMemo } from 'react';
 
const getAverage = numbers => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b);
  return sum / numbers.length;
};
 
const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');
 
  const onChange = e => {
    setNumber(e.target.value);
  };
  const onInsert = () => {
    const nextList = list.concat(parseInt(number));
    setList(nextList);
    setNumber('');
  };
 
  const avg = useMemo(() => getAverage(list), [list]);
 
  return (
    <div>
      <input value={number} onChange={onChange} />
      <button onClick={onInsert}>등록</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};
 
export default Average;
```

- list 배열의 내용이 바뀔 때만 getAverage 함수가 호출된다.

```jsx
import React from 'react';
import Average from './Average';
 
const App = () => {
  return <Average />;
};
 
export default App;
```

## **useCallback**

- useMemo와 상당히 비슷한 함수이다.
- 주로 렌더링 성능을 최적화해야 하는 상황에서 사용한다.
- 이벤트 핸들러 함수를 필요할 때만 생성할 수 있다.

```jsx
import React, { useState, useMemo, useCallback } from 'react';
 
const getAverage = numbers => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b);
  return sum / numbers.length;
};
 
const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');
 
  const onChange = useCallback(e => {
    setNumber(e.target.value);
}, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성
const onInsert = useCallback(() => {
    const nextList = list.concat(parseInt(number));
    setList(nextList);
    setNumber('');
  }, [number, list]); // number 혹은 list가 바뀌었을 때만 함수 생성
 
  const avg = useMemo(() => getAverage(list), [list]);
 
  return (
    <div>
      <input value={number} onChange={onChange}  />
      <button onClick={onInsert}>등록</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};
 
export default Average;
```

- useCallback의 첫 번째 파라미터에는 생성하고 싶은 함수를 넣는다.
- useCallback의 두 번째 파라미터에는 배열을 넣으면 된다. 이 배열에는 어떤 값이 바뀌었을 때 함수를 새로 생성해야 하는지 명시해야 한다.
- 비어 있는 배열을 넣게 되면 컴포넌트가 렌더링될 때 단 한 번만 함수가 생성된다.
- 빈 배열이 아닐 경우, input 내용이 바뀌거나 새로운 항목이 추가될 때마다 함수가 생성된다.
- 기존의 값을 조회해서 새로운 배열을 생성하는 경우, 배열 안에 기존 요소를 꼭 넣어 주어야 합니다.

```jsx
useMemo(() => {
  const fn = () => {
    console.log('hello world!');
  };
  return fn;
}, [])

useCallback(() => {
  console.log('hello world!');
}, [])
```

- 일반 값(숫자, 문자열, 객체)을 재 사용 하려면 useMemo를 사용
- 함수를 재 사용 하려면 useCallback을 사용

## **useRef**

- 함수형 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 준다.

```jsx
import React, { useState, useMemo, useCallback, useRef } from 'react';
 
const getAverage = numbers => {
  console.log('평균값 계산 중..');
  if (numbers.length === 0) return 0;
  const sum = numbers.reduce((a, b) => a + b);
  return sum / numbers.length;
};
 
const Average = () => {
  const [list, setList] = useState([]);
  const [number, setNumber] = useState('');
  const inputEl = useRef(null);
 
  const onChange = useCallback(e => {
    setNumber(e.target.value);
  }, []); // 컴포넌트가 처음 렌더링될 때만 함수 생성

const onInsert = useCallback(() => {
    const nextList = list.concat(parseInt(number));
    setList(nextList);
    setNumber('');
    inputEl.current.focus();
  }, [number, list]); // number 혹은 list가 바뀌었을 때만 함수 생성
 
  const avg = useMemo(() => getAverage(list), [list]);
 
  return (
    <div>
      <input value={number} onChange={onChange} ref={inputEl} />
      <button onClick={onInsert}>등록</button>
      <ul>
        {list.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
      <div>
        <b>평균값:</b> {avg}
      </div>
    </div>
  );
};
 
export default Average;
```

### 컴포넌트 로컬 변수 사용하기

- 로컬 변수란 렌더링과 상관없이 바뀔 수 있는 값이다.

```jsx
import React, { useRef } from 'react';
 
const RefSample = () => {
  const id = useRef(1);
  const setId = (n) => {
    id.current = n;
  }
  const printId = () => {
    console.log(id.current);
  }
  return (
    <div>
      refsample
    </div>
  );
};
 
export default RefSample;
```

### 커스텀 Hooks 만들기

```jsx
import { useReducer } from 'react';
 
function reducer(state, action) {
  return {
    ...state,
    [action.name]: action.value
  };
}
 
export default function useInputs(initialForm) {
  const [state, dispatch] = useReducer(reducer, initialForm);
  const onChange = e => {
    dispatch(e.target);
  };
  return [state, onChange];
}
```

```jsx
import React from 'react';
import useInputs from './useInputs';
 
const Info = () => {
  const [state, onChange] = useInputs({
    name: '',
    nickname: ''
  });
  const { name, nickname } = state;
 
  return (
    <div>
      <div>
        <input name="name" value={name} onChange={onChange} />
        <input name="nickname" value={nickname} onChange={onChange} />
      </div>
      <div>
        <div>
          <b>이름:</b> {name}
        </div>
        <div>
          <b>닉네임: </b>
          {nickname}
        </div>
      </div>
    </div>
  );
};
 
export default Info;
```

# Hook 영상 강의

```jsx
useEffect(() => {
	// 컴포넌트가 마운트된 이후,
	// 의존성 배열에 있는 변수들 중 하나라도 값이 변경되었을 때 실행됨
	// 의존성 배열에 빈 배열[]을 넣으면 마운트와 언마운트 시에 단 한 번씩만 실행됨
	// 의존성 배열 생략 시 컴포넌트 업데이트 시 마다 실행됨

	return () => {
		// 컴포넌트가 마운트 해제되기 전에 실행굄
		...
	}
}, [의존성 변수1, 의존성 변수2, ...]);
```

### Hook의 규칙

1. Hook은 무조건 최상위 레벨에서만 호출해야한다.
2. 리액트 함수 컴포넌트에서만 Hook을 호출해야한다.

참고: *eslint-plugin-react-hooks*